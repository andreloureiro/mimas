;; Analyzed by ClojureScript 1.7.170
{:use-macros {testing cljs.test, defcard-rg devcards.core, is cljs.test, deftest devcards.core, defcard devcards.core}, :excludes #{}, :name cards.core, :imports nil, :requires {t cljs.test, subs mimas.subs, mimas.core mimas.core, schema.core schema.core, reagent.core reagent.core, r reagent.core, mimas.db mimas.db, mimas.subs mimas.subs, cljs.test cljs.test, s schema.core, mimas.handlers mimas.handlers, h mimas.handlers, re-frame.core re-frame.core}, :uses {State mimas.db, subscribe re-frame.core, task-form mimas.core, project-item mimas.core, project-list mimas.core, dispatch-sync re-frame.core, task-list mimas.core, state mimas.db, task-item mimas.core, title mimas.core, dispatch re-frame.core}, :defs {subscriptions {:protocol-inline nil, :meta {:file "/home/andre/Project/ClojureScript/mimas/src/cards/core.cljs", :line 26, :column 10, :end-line 26, :end-column 23}, :name cards.core/subscriptions, :variadic false, :file "src/cards/core.cljs", :end-column 23, :method-params ([]), :protocol-impl nil, :arglists-meta (), :column 1, :line 26, :end-line 26, :max-fixed-arity 0, :fn-var true, :arglists nil, :test true}, state-mock {:name cards.core/state-mock, :file "src/cards/core.cljs", :line 48, :column 1, :end-line 48, :end-column 16, :meta {:file "/home/andre/Project/ClojureScript/mimas/src/cards/core.cljs", :line 48, :column 6, :end-line 48, :end-column 16}}, task-mock {:name cards.core/task-mock, :file "src/cards/core.cljs", :line 57, :column 1, :end-line 57, :end-column 15, :meta {:file "/home/andre/Project/ClojureScript/mimas/src/cards/core.cljs", :line 57, :column 6, :end-line 57, :end-column 15}}, handlers {:protocol-inline nil, :meta {:file "/home/andre/Project/ClojureScript/mimas/src/cards/core.cljs", :line 64, :column 10, :end-line 64, :end-column 18}, :name cards.core/handlers, :variadic false, :file "src/cards/core.cljs", :end-column 18, :method-params ([]), :protocol-impl nil, :arglists-meta (), :column 1, :line 64, :end-line 64, :max-fixed-arity 0, :fn-var true, :arglists nil, :test true}, title-subs {:name cards.core/title-subs, :file "src/cards/core.cljs", :line 101, :column 1, :end-line 101, :end-column 16, :meta {:file "/home/andre/Project/ClojureScript/mimas/src/cards/core.cljs", :line 101, :column 6, :end-line 101, :end-column 16}}, title-tests {:protocol-inline nil, :meta {:file "/home/andre/Project/ClojureScript/mimas/src/cards/core.cljs", :line 108, :column 10, :end-line 108, :end-column 21}, :name cards.core/title-tests, :variadic false, :file "src/cards/core.cljs", :end-column 21, :method-params ([]), :protocol-impl nil, :arglists-meta (), :column 1, :line 108, :end-line 108, :max-fixed-arity 0, :fn-var true, :arglists nil, :test true}, form-data {:name cards.core/form-data, :file "src/cards/core.cljs", :line 116, :column 1, :end-line 116, :end-column 19, :meta {:file "/home/andre/Project/ClojureScript/mimas/src/cards/core.cljs", :line 116, :column 10, :end-line 116, :end-column 19}}, dropdown-list {:name cards.core/dropdown-list, :file "src/cards/core.cljs", :line 117, :column 1, :end-line 117, :end-column 23, :meta {:file "/home/andre/Project/ClojureScript/mimas/src/cards/core.cljs", :line 117, :column 10, :end-line 117, :end-column 23}}}, :require-macros {dc devcards.core, devcards.core devcards.core, r reagent.core, reagent.core reagent.core, s schema.core, schema.core schema.core, t cljs.test, cljs.test cljs.test}, :cljs.analyzer/constants {:seen #{State new-edit-task :task/list query = subscribe :dropdown/list task-mock :testing-contexts :ns :name conj :task/project state-mock :file get :end-column :form/title :type :task/title js/String cards.core/subscriptions group-by db :task/editing cards.core/handlers :task/id :column state-before-task-finish :app/title :initialize assoc-in :fail update :line not type handlers state :ok :task/form :task/done? clojure.core/deref subs/simple-sub PersistentVector cards.core/title-tests state-after-task-finish :expected :end-line subscriptions :form/project h/task-remove new-task-list s/check :error keys PersistentArrayMap :pass :arglists :actual :doc cards.core new-form assoc h/toggle-done title-subs KeySeq :test :a :message title-tests}, :order [:initialize :a :ok :type :expected :actual :message :error = s/check State state :pass :fail not clojure.core/deref subs/simple-sub db query subscribe :app/title get type js/String :dropdown/list keys group-by :task/project :task/list KeySeq PersistentVector :task/form PersistentArrayMap cards.core/subscriptions :ns :name :file :end-column :column :line :end-line :arglists :doc :test cards.core subscriptions :task/editing :form/title :form/project :task/id :task/title :task/done? :testing-contexts new-form assoc-in state-mock new-task-list update conj task-mock new-edit-task assoc h/task-remove state-after-task-finish h/toggle-done state-before-task-finish cards.core/handlers handlers title-subs cards.core/title-tests title-tests]}, :doc nil}